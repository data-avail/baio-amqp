// Generated by CoffeeScript 1.6.2
(function() {
  var amqp, amqpConnect, amqpPub, amqpPub5times, amqpSub, amqpSubOncePub5times, amqpSubOncePub5timesThenPubFromSub, amqpSubPubNoAckFirstTime;

  amqp = require("./amqp");

  amqpConnect = function(done) {
    amqp.setConfig({
      uri: "amqp://localhost"
    });
    return amqp.connect(function(err) {
      console.log("connect", err);
      return done(err);
    });
  };

  amqpSub = function(done) {
    return amqpConnect(function() {
      return amqp.sub({
        queue: "test",
        onPop: function(msg, ack) {
          console.log("onSub", msg);
          return ack();
        }
      }, done);
    });
  };

  amqpPub = function(done) {
    return amqpConnect(function() {
      var i, _i;

      for (i = _i = 0; _i <= 5; i = ++_i) {
        amqp.pub("test", {
          level: 0
        });
      }
      return done();
    });
  };

  amqpPub5times = function(done) {
    return amqpConnect(function() {
      var i, _i;

      for (i = _i = 0; _i <= 4; i = ++_i) {
        amqp.pub("test", {
          level: 0
        });
      }
      return done();
    });
  };

  amqpSubOncePub5times = function(done) {
    return amqpConnect(function() {
      return amqp.sub({
        queue: "test",
        onPop: function(msg, ack) {
          console.log("onSub", msg);
          return ack();
        }
      }, function(err) {
        var i, _i;

        if (!err) {
          for (i = _i = 0; _i <= 4; i = ++_i) {
            amqp.pub("test", {
              level: 0
            });
          }
          return done(err);
        }
      });
    });
  };

  amqpSubOncePub5timesThenPubFromSub = function(done) {
    return amqpConnect(function() {
      return amqp.sub({
        queue: "test",
        onPop: function(msg, ack) {
          console.log("onSub", msg);
          if (msg.level === 0) {
            amqp.pub("test", {
              level: 1
            });
          }
          return ack();
        }
      }, function(err) {
        var i, _i;

        if (!err) {
          for (i = _i = 0; _i <= 4; i = ++_i) {
            amqp.pub("test", {
              level: 0
            });
          }
          return done(err);
        }
      });
    });
  };

  amqpSubPubNoAckFirstTime = function(done) {
    var _f;

    _f = true;
    return amqpConnect(function() {
      return amqp.sub({
        queue: "test",
        onPop: function(msg, ack) {
          console.log("onPop", msg);
          ack(_f);
          return _f = false;
        }
      }, function(err) {
        amqp.pub("test", {
          level: 0
        });
        return done(err);
      });
    });
  };

  /*
  amqpPub ->
  
  amqpSub (err) ->
    console.log "subscribed", err
  
  amqpPub5times ->
    console.log "published 5 times"
  
  amqpSub (err) ->
    console.log "subscribed", err
  */


  amqpSubOncePub5times(function(err) {
    return console.log("amqpSubOncePub5times", err);
  });

  /*
  amqpSubOncePub5timesThenPubFromSub (err) ->
    console.log "amqpSubOncePub5timesThenPubFromSub", err
  
  
  
  amqpSubPubNoAckFirstTime ->
  */


}).call(this);

/*
//@ sourceMappingURL=amqp.test.map
*/
